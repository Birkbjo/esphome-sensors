# https://gist.github.com/Plawasan/4ae826b05aaa7812f3a191714ca47a50

substitutions:
  esp_name: LilyGo Display #Device Name
  esp_hostname: esp-display
  ip_address: 192.168.1.107
  ip_gw: 192.168.1.1
  ip_netmask: 255.255.255.0
  run_time: 5min #needs to be as long as needed to get data
  sleep_time: 15min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6.5h # 1st sleep time after midnight
  font_glyphs: |-
      !"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzæøå
esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# deep_sleep:
#     run_duration: ${run_time}
#     sleep_duration: ${sleep_time}
#     id: deep_sleep_1
#     esp32_ext1_wakeup:
#         pins: GPIO39
#         mode: ALL_LOW

captive_portal:

web_server:
  port: 80

sun:
  latitude: !secret lat
  longitude: !secret lng

ota:
  password: !secret ota_password

# Enable logging
logger:

time:
  - platform: homeassistant
    id: ntp

# Enable Home Assistant API
api:
  password: ""
# sun:
#     latitude: 50.0260°
#     longitude: 14.2835°

spi:
  clk_pin: 18
  mosi_pin: 23

font:
#   - file: "OpenSans-Regular.ttf"
#     id: font_name
#     size: 40
#   - file: "OpenSans-Medium.ttf"
#     id: font_value
#     size: 64
#   - file: "OpenSans-Medium.ttf"
#     id: font_footer
#     size: 28
#   - file: "OpenSans-Regular.ttf"
#     id: font_small
#     size: 24
  - file: "fonts/Roboto-Light.ttf"
    id: font_name
    size: 40
    glyphs: ${font_glyphs}
  - file: "fonts/Roboto-Light.ttf"
    id: font_value
    size: 64
    glyphs: ${font_glyphs}
  - file: "fonts/Roboto-Light.ttf"
    id: font_footer
    size: 28
    glyphs: ${font_glyphs}
  - file: "fonts/Roboto-Medium.ttf"
    id: font_small
    size: 28
    glyphs: ${font_glyphs}
    # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: "fonts/Roboto-Medium.ttf"
    id: font_small_reg
    size: 28
    glyphs: ${font_glyphs}
    # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: "materialdesignicons-webfont.ttf"
    id: font_icons
    size: 140
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional

  - file: "materialdesignicons-webfont.ttf"
    id: font_icons_small
    size: 56
    glyphs:
      - "\U000F059C" # Sunrise
      - "\U000F059B" # Sunset
      - "\U000F10C2" # Temperature High
      - "\U000F10C3" # Temperature Low
      - "\U000F07E4" # CO2
      - "\U000F054B" # umbrella
      - "\U000F13E2" # umbrella-closed
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F0594" # clear-night
      - "\U000F0599" # sunny
      - "\U000F07CA" # fuel
      - "\U000F024A" # flower
      - "\U000F051F" # time-remaining
      - "\U000F140B" # Energy
      - "\U000F0F29" # Frost Alert
      - "\U000F11DB" # Window cløsed
      - "\U000F11DC" # window open

  - file: "materialdesignicons-webfont.ttf"
    id: font_icons_tiny
    size: 28
    glyphs:
      - "\U000F04B2" # sleep
      - "\U000F02DC" # home
      - "\U000F13D7" # not_home
      - "\U000F12A3" # battery-high
      - "\U000F12A2" # battery-medium
      - "\U000F12A1" # battery-low
      - "\U000F008E" # battery-outline

external_components:
  - source:
      type: git
      url: https://github.com/vbaksa/esphome
      ref: dev
    components: [lilygo_t5_47_display, lilygo_t5_47_battery]
    refresh: 50days

# external_components:
#     - source:
#           type: local
#           path: ../clone/esphome/esphome/components
#       components: [lilygo_t5_47_display, lilygo_t5_47_battery]
#       refresh: 0s
button:
  - platform: restart
    name: "${esp_name} Restart"

  - platform: template
    name: "${esp_name} Refresh"
    icon: "mdi:update"
    on_press:
      then:
        - script.execute: all_data_received
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: "${esp_name} Button 1"
    on_press:
      then:
        - component.update: t5_display

sensor:
  - platform: homeassistant
    entity_id: sensor.temperature_2
    id: ext_temp
    internal: true

  - platform: lilygo_t5_47_battery
    id: batt_volt
    update_interval: never
    voltage:
      name: "${esp_name} Battery Voltage"

  - platform: template
    name: "${esp_name} Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).voltage->state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};
    update_interval: never
  
  - platform: homeassistant
    name: "Forecast"
    entity_id: weather.hg78c
    attribute: temperature
    id: weather_forecast_temp
    internal: true

text_sensor:
  - platform: homeassistant
    name: "Skydekke"
    entity_id: weather.hg78c
    id: weather_current_condition
    internal: true
    on_value:
      then:
        - script.execute: all_data_received


script:
  - id: refresh_display
    then:
      - repeat:
          count: 1
          then:
            - display.page.show: black
            - component.update: t5_display
            #- display.page.show: blank
            - component.update: t5_display

  - id: all_data_received
    then:
      - component.update: batt_volt
      - component.update: batt
      #      - script.execute: refresh_display
      - display.page.show: main
      - component.update: t5_display

display:
  #  - platform: t547
  - platform: lilygo_t5_47_display
    power_off_delay_enabled: true
    clear: false
    id: t5_display
    #rotation: 270
    update_interval: 5s
    pages:
      - id: black
        lambda: |-
         #define xres 960 
         #define yres 540
         //draw filled background
         it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
         it.print(xres/2, yres/2, id(font_name), COLOR_OFF, TextAlign::CENTER, "Refreshing...");

      - id: main
        lambda: |-
            #define xres 960 
            #define yres 540
            #define x_pad 10 // border padding
            #define y_pad 10 // border padding      
            #define cat_pad 75 // padding before category
            #define val_pad 35 // padding before value
            #define icon_pad 20 //padding after icons 
            #define unit_pad 10 //padding between value and unit

            #define x1n 20 //x position 1st column name
            #define x1v xres*0.25 //x position 1st column value
            #define x1i 40 //x position 1st column icon

            #define x2n xres/2 //x position 2nd column name
            #define x2v x1v*2 //x position 2nd column value
            #define x2i xres/2+20 //x position 1st column icon
            
            #define x1 xres/4
            #define x2 (xres/4)*3
            //draw clear background (forces whole display to redraw)
            it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
            it.filled_rectangle(1, 1, xres-1, yres-1, COLOR_OFF);


            
            auto get_weather_glyph = [](std::string weather_condition) {
                std::map<std::string, std::string> glyphs;
                
                if(weather_condition == "sunny" && sun_sun->elevation() < -0.83333f) {
                weather_condition = "clear_night";
                }

                glyphs["sunny"] = "\U000F0599";
                glyphs["clearsky"] = "\U000F0599";
                glyphs["clear_night"] = "\U000F0594";
                glyphs["cloudy"] = "\U000F0590";
                glyphs["partlycloudy"] = "\U000F0595";
                glyphs["fog"] = "\U000F0591";
                glyphs["hail"] = "\U000F0592";
                glyphs["lightning_rainy"] = "\U000F067E";
                glyphs["lightning"] = "\U000F0593";
                glyphs["pouring"] = "\U000F0596";
                glyphs["rainy"] = "\U000F0597";
                glyphs["snowy_rainy"] = "\U000F067F";
                glyphs["snowy"] = "\U000F0F36";
                glyphs["windy_variant"] = "\U000F059E";
                glyphs["windy"] = "\U000F059D";
                return glyphs.at(weather_condition);
            };

            int y = 0;

            // Date
            // update time
            it.strftime(0, 0, id(font_small), "%H:%M", id(ntp).now());

            //it.strftime(xres/2, y+y_pad, id(font_name), TextAlign::TOP_CENTER, "%A %d/%b/%Y", id(ntp).now());
            y+=y_pad;


            it.printf(x1v, y, id(font_name), TextAlign::TOP_CENTER, "Nå", id(ext_temp).state);
            it.printf(x2v, y, id(font_name), TextAlign::TOP_CENTER, "I dag", id(ext_temp).state);

            y+=val_pad;

            int weather_icon_x = x1v-icon_pad;
            
            if(id(weather_current_condition).has_state()) {
                std::string condition = id(weather_current_condition).state;
                auto glyph = get_weather_glyph(condition);

                it.printf(weather_icon_x, y, id(font_icons), TextAlign::TOP_RIGHT, glyph.c_str());
            }
    
                // it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0F38");}

            y+=70;
            it.printf(x1v, y, id(font_value), TextAlign::BASELINE_LEFT, "%.1f°C", id(ext_temp).state);
            it.printf(x2v, y, id(font_value), TextAlign::BASELINE_LEFT, "%.0f°C", id(weather_forecast_temp).state);

            it.printf(xres, 2, id(font_small), TextAlign::TOP_RIGHT, "%.0f %%", id(batt).state);


            //it.printf(xres, 5, id(font_small_reg), TextAlign::TOP_RIGHT, "Battery: %.0f %%", id(batt).state);
