esphome:
  name: esp32-display
  platform: esp32
  board: lolin32

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid 
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.25
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Node-Mcu Fallback Hotspot"
    password: !secret wifi_ap_fallback_password

captive_portal:

spi:
  clk_pin: GPIO18 #yellow
  mosi_pin: GPIO23 #blue
  miso_pin: GPIO12 #not connected for using external SPI

# Example configuration entry
time:
  - platform: homeassistant
    id: homeassistant_time
sun:
  latitude: 59.9209533°
  longitude: 10.7829543°
  
font:
  - file: "fonts/roboto-thin.ttf"
    id: roboto_thin
    size: 50
  - file: "fonts/Roboto-Light.ttf"
    id: roboto
    size: 50
  - file: "fonts/Roboto-Light.ttf"
    id: roboto_small
    size: 10

    # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons
    size: 72
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog      
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional
      
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
      - "\U000F059C" # Sunrise
      - "\U000F059B" # Sunset
      - "\U000F10C2" # Temperature High
      - "\U000F10C3" # Temperature Low
      - "\U000F07E4" # CO2
      - "\U000F054B" # umbrella
      - "\U000F13E2" # umbrella-closed
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F0594" # clear-night
      - "\U000F0599" # sunny
      - "\U000F07CA" # fuel
      - "\U000F024A" # flower
      - "\U000F051F" # time-remaining
      - "\U000F140B" # Energy
      - "\U000F0F29" # Frost Alert



#Dimensions: 128px x 296px
display:
  - platform: waveshare_epaper
    id: display4_2
  
    cs_pin: GPIO05 #orange
    dc_pin: GPIO17 #green
    busy_pin: GPIO04 #purple
    reset_pin: GPIO16 #white
    model: 4.20in
    #id: display_update
    update_interval: 300s
    #full_update_every: 60
    #rotation: 90°
    lambda: |-
      //it.line(0, 0, 50, 50);
      //ESP_LOGD(id(ute_temp_sensor).state);
      it.strftime(0, 0, id(roboto_small), "%H:%M", id(homeassistant_time).now());

      if(isnan(id(ute_temp_sensor).state)) {
          it.printf(70, 100, id(roboto), "Initializing...");
          return;
      }

      // weather icons

      auto get_weather_glyph = [](std::string weather_condition) {
        std::map<std::string, std::string> glyphs;
        
        if(weather_condition == "sunny" && sun_sun->elevation() < -0.83333f ) {
          weather_condition = "clear_night";
        }

        glyphs["sunny"] = "\U000F0599";
        glyphs["clear_night"] = "\U000F0594";
        glyphs["cloudy"] = "\U000F0590";
        glyphs["partlycloudy"] = "\U000F0595";
        glyphs["fog"] = "\U000F0591";
        glyphs["hail"] = "\U000F0592";
        glyphs["lightning_rainy"] = "\U000F067E";
        glyphs["lightning"] = "\U000F0593";
        glyphs["pouring"] = "\U000F0596";
        glyphs["rainy"] = "\U000F0597";
        glyphs["snowy_rainy"] = "\U000F067F";
        glyphs["snowy"] = "\U000F0F36";
        glyphs["windy_variant"] = "\U000F059E";
        glyphs["windy"] = "\U000F059D";
        return glyphs.at(weather_condition);
      };

      if(id(weather_current_condition).has_state()) {
        std::string condition = id(weather_current_condition).state;
        auto glyph = get_weather_glyph(condition);


        it.printf(200, 0, id(font_icons), TextAlign::TOP_CENTER, glyph.c_str());
      }
  
  
      if(id(ute_temp_sensor).state) {
        it.printf(200, 75, id(roboto), TextAlign::TOP_CENTER, "%.1f°C", id(ute_temp_sensor).state);
      }

      it.printf(0, it.get_height(), id(roboto), TextAlign::BOTTOM_LEFT, "%.1f°C", id(stue_temp_sensor).state);

      it.printf(it.get_width(), it.get_height(), id(roboto), TextAlign::BOTTOM_RIGHT, "%.1f°C", id(bad_temp_sensor).state);
      
      return;

  


sensor:
  - platform: homeassistant
    internal: true
    entity_id: sensor.temperature_2
    id: ute_temp_sensor
    on_value:
      - component.update: display4_2
      
  - platform: homeassistant
    internal: true
    entity_id: sensor.temperature_11
    id: bad_temp_sensor
    # on_value:
    #    - component.update: display4_2
      
  - platform: homeassistant
    internal: true
    entity_id: sensor.temperature_14
    id: stue_temp_sensor
    on_value:
        - component.update: display4_2
  # - platform: homeassistant
  #   name: "Værvarsel"
  #   entity_id: weather.hg78c_hourly
  #   id: weather_current_condition
  #   internal: true
  - platform: adc
    pin: 34
    attenuation: auto
    name: "Battery adc raw"
    id: "batt_raw"
    on_value:
      then:
        - component.update: batt_volt
        - component.update: batt_percentage

  - platform: template
    name: "Display Battery Voltage"
    id: batt_volt
    unit_of_measurement: "V"
    accuracy_decimals: 2
    device_class: battery
    update_interval: never
    lambda: |-
      float volts;
      float readValue = id(batt_raw).state;
      volts = readValue * 2;
      return volts;
   

  - platform: template
    name: "Display Battery Percentage"
    id: batt_percentage
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    update_interval: never
    lambda: |-
      int y = (1-(4.1-id(batt_volt).state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};

text_sensor:
  - platform: homeassistant
    name: "Skydekke"
    entity_id: weather.hg78c_hourly
    id: weather_current_condition
    on_value:
        - delay: 5s
        - component.update: display4_2
        - if:
            condition:
              - sun.is_above_horizon:
            then:
              - logger.log: Sun is above horizon!
  